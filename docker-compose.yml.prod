# version: '3'
name: lobby
services:
  web_server:
    image: nginx:1.21.4-alpine
    volumes:
      - ./apps/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./apps/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./apps/nginx:/var/www/
    ports:
      - "80:80"
      - "443:443"
    networks:
      - docker
  # db:
  #   image: postgres:16-alpine3.19
  #   restart: unless-stopped
  #   volumes:
  #     - db-data:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: lobby
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - docker

  # db_test:
  #   image: postgres:16-alpine3.19
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: lobby_test
  #   ports:
  #     - "5433:5432"
  #   networks:
  #     - docker

  backend:
    image: node:20.12.2-alpine3.19
    restart: unless-stopped
    working_dir: /apps/backend
    volumes:
      - ./apps/backend:/apps/backend
      - ./packages/domain:/packages/domain
      - ./packages/socket:/packages/socket
    entrypoint: /bin/sh -c "sh entrypoint.sh; sleep infinity"
    # depends_on:
    #   - db
    networks:
      - docker
  heartbeat:
    image: node:20.12.2-alpine3.19
    restart: unless-stopped
    working_dir: /apps/heartbeat
    volumes:
      - ./apps/heartbeat:/apps/heartbeat
      - ./packages/domain:/packages/domain
    entrypoint: /bin/sh -c "sh entrypoint.sh; sleep infinity"
    depends_on:
      # - db
      - backend
    networks:
      - docker
  frontend:
    image: node:20.12.2-alpine3.19
    restart: unless-stopped
    working_dir: /apps/frontend
    environment:
      - NUXT_PUBLIC_BACKEND_URL=https://lobbylobby.us-east-1.elasticbeanstalk.com
    volumes:
      - ./apps/frontend:/apps/frontend
      - ./packages/domain:/packages/domain
      - ./packages/socket:/packages/socket
    entrypoint: /bin/sh -c "sh entrypoint.sh; sleep infinity"
    # depends_on:
    #   - db
    networks:
      - docker
networks: 
  docker: 
    driver: bridge
volumes:
  db-data: